=== modified file 'swig/adchpp.i'
--- swig/adchpp.i	2012-06-29 16:07:26 +0000
+++ swig/adchpp.i	2012-07-13 19:25:06 +0000
@@ -284,6 +284,11 @@
 
 };
 
+// SWIG doesn't like nested classes
+%{
+typedef Util::Reason DCReason;
+%}
+
 class CID {
 public:
 	enum { SIZE = 192 / 8 };
@@ -574,7 +579,7 @@
 	size_t getQueuedBytes() throw();
 
 	/** @param reason The statistic to update */
-	void disconnect(Util::Reason reason, const std::string &) throw();
+	void disconnect(DCReason reason, const std::string &) throw();
 	const std::string& getIp() const throw();
 
 	/**
@@ -585,7 +590,7 @@
 	void setDataMode(const DataFunction& handler, int64_t aBytes);
 
 	%extend{
-		void disconnect(Util::Reason reason) {
+		void disconnect(DCReason reason) {
 			self->disconnect(reason, Util::emptyString);
 		}
 	}
@@ -598,9 +603,9 @@
 	using Entity::send;
 	virtual void send(const BufferPtr& cmd);
 	
-	virtual void disconnect(Util::Reason reason, const std::string &);
+	virtual void disconnect(DCReason reason, const std::string &);
 	%extend{
-		void disconnect(Util::Reason reason) {
+		void disconnect(DCReason reason) {
 			self->disconnect(reason, Util::emptyString);
 		}
 	}
@@ -628,8 +633,8 @@
 %template(SignalEI) Signal<void (Entity&, int)>;
 %template(SignalTraitsEI) SignalTraits<void (Entity&, int)>;
 
-%template(SignalERS) Signal<void (Entity&, adchpp::Util::Reason, const std::string &)>;
-%template(SignalTraitsERS) SignalTraits<void (Entity&, adchpp::Util::Reason, const std::string &)>;
+%template(SignalERS) Signal<void (Entity&, DCReason, const std::string &)>;
+%template(SignalTraitsERS) SignalTraits<void (Entity&, DCReason, const std::string &)>;
 
 %template(SignalESB) Signal<void (Entity&, const StringList&, bool&)>;
 %template(SignalTraitsESB) SignalTraits<void (Entity&, const StringList&, bool&)>;
@@ -715,7 +720,7 @@
 	typedef SignalTraits<void (Entity&, const std::string&)> SignalBadLine;
 	typedef SignalTraits<void (Entity&, const AdcCommand&, bool&)> SignalSend;
 	typedef SignalTraits<void (Entity&, int)> SignalState;
-	typedef SignalTraits<void (Entity&, Util::Reason, const std::string &)> SignalDisconnected;
+	typedef SignalTraits<void (Entity&, DCReason, const std::string &)> SignalDisconnected;
 
 	SignalConnected::Signal& signalConnected() { return signalConnected_; }
 	SignalReady::Signal& signalReady() { return signalReady_; }

=== modified file 'swig/lua.i'
--- swig/lua.i	2011-11-07 22:22:56 +0000
+++ swig/lua.i	2012-07-13 19:25:06 +0000
@@ -144,7 +144,7 @@
         lua_pop(L, 1);
 	}
 
-	void operator()(adchpp::Entity& c, Util::Reason reason, const std::string& info) {
+	void operator()(adchpp::Entity& c, DCReason reason, const std::string& info) {
 		pushFunction();
 
 		SWIG_NewPointerObj(L, &c, SWIGTYPE_p_adchpp__Entity, 0);
@@ -260,7 +260,7 @@
 	$1 = LuaFunction(L);
 }
 
-%typemap(in) std::function<void (adchpp::Entity&, adchpp::Util::Reason, const std::string&) > {
+%typemap(in) std::function<void (adchpp::Entity&, DCReason, const std::string&) > {
 	$1 = LuaFunction(L);
 }
 

